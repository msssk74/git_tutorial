Git コマンド

※HEADとは、参照中であるブランチの最新のポインタ
※ブランチとはコミットを指したポインタ

# 実際の開発方法（基本）
# masterブランチはリリース用ブランチとして、開発はトピックブランチで進める
# <利点>
# ・リリースされているバージョンがすぐわかる
# 　⇒何がリリースされているのかわからなくなるのを防ぐ
# ・リリースからの切り戻しが簡単
# 　⇒相違すると、切り戻しが難しくなる

# 円滑なチーム開発に向けて
# ・プルリクエスト：自分の変更したコードをリポジトリに取り込んでもらうための依頼機能

# GitHub Flow
# ・masterブランチは常にデプロイできる状態に保つ
# ・新開発はmasterブランチから新しいブランチを作成してスタート
# ・作成した新しいブランチ上で作業しコミットする
# ・定期的にPushする
# ・masterにマージするためにプルリクエストを使用し、必ずレビューを通す
# ・masterブランチにマージしたらすぐにデプロイする
# 　→テストとデプロイは自動化

# 禁止事項
#・GitHubにプッシュしたコミットをリベースする
#・「git push -f」

# .gitディレクトリの作成（ローカルリポジトリの作成）
git init

# リモートリポジトリからローカルリポジトリを作成
git clone <リポジトリ名>

# 変更分をステージングに追加
git add <ファイル名/ディレクトリ名>
  .：対象に記載すると全

# ステージングのファイルをローカルリポジトリに登録
git commit
　-m <メッセージ>：エディターを起動しないでコミット
　-v：エディターが起動し変更内容が確認できる
　--amend：直前のコミットを修正する（但し、リモートリポジトリにpushしたコミットややり直すのは禁止）

# タグの一覧を表示
git tag
　<タグ名>：軽量タグ名
　<タグ名> <コミット名>：後付けでコミットにタグを割り当てる
　-a <タグ名> -m <メッセージ>：注釈付きタグ
　-L "201705"：パターンを指定してタグを表示

# タグのデータを表示
git show <タグ名>

#「origin」というショートカットでurlのリモートリポジトリを登録
git remote add origin https://github.com/<ユーザー名>/<リポジトリ名>.git

# リモートリポジトリを操作
## ・リモートリポジトリの情報を表示する
git remote
　-v：対応するリモートリポジトリのURLを表示
## ・リモートリポジトリを複数登録する
git remote <リモート名>
## リモートにURLを登録
git remote <短縮名> <URL>

# git remoteより詳しい情報を表示
git remote show <リモート名>
　例）git remote show origin

# gitブランチの情報を表示する
git branch
　-a：全てのブランチを表示（リモート込み）
　　リモートブランチは、「remote/origin/<ブランチ>」で参照できる
　　例）remotes/origin/master
　<ブランチ名>：ブランチを新規作成（ブランチの切り替えは行わない）
　-m <ブランチ名>：ブランチ名を変更
　-d <ブランチ名>：ブランチの削除（コミットしていないファイルがある場合はアラートがでる）
　-D <ブランチ名>：ブランチの強制削除

git branch -D <ブランチ名>

# リモートリポジトリの名称変更
git remote renme <旧リモート名> <新リモート名>

# リモートリポジトリの削除
git remote rm <リモート名>

# リモートリポジトリに登録する
git push <リモート名> <ブランチ名>
　例）git push origin master
　-u：次回以降、「git push」だけでorigin/masterにpushできる（初回設定）
　<リモート名> <タグ名>：タグをリモートリポジトリに送信
　--tags：タグを一斉に送信する

# リモートリポジトリからローカルリポジトリにデータを取得
git fetch <リモート名>
　例）git fetch origin

# 作業中のブランチにマージする
git merge <リモート名/ブランチ名>

# fetchとmergeを一度に行いリモートリポジトリからワークツリーに取得する
git pull <リモート名> <ブランチ名>
　例）git pull origin master
# 上記コマンドの省略可能
git pull
# これは下記コマンドと同じ
git fetch origin master
git merger origin/master

# マージの種類（３種類）
・Fast Foward：早送りになるマージ
　⇒枝分かれしてなかった場合にブランチのポインタを前に進めるだけ
・Auto Merge：基本的なマージ
　⇒枝分かれして開発していた場合、マージコミットという新しいコミット（スナップショット）を作成
・コンフリクト

# コンフリクトの解消方法
①ファイルの内容を書き換える
②「<<」「==」「>>」の記述を削除する

# コンフリクト関連の事故が起きにくい運用ルール
・複数人で同じファイルを変更しない
・pullやmergeする前に変更中の状態にしない（cmmitやstashをしておく）
・pullするときには、pullするブランチに移動してからpullする
・コンフリクトしても慌てない

# 別のブランチを取り込むとともに、取り込んだブランチの起点がそのブランチのHEADとなる
git rebase
　<ブランチ名>：履歴を整えた形で変更を統合する
　-i <コミットID>：対象コミットを変更
　-i HEAD~3：直近3件のコミットを変更

# マージかリベースか
# ・マージ
# 　メリット：コンフリクトの解決が比較的簡単
# 　デメリット：マージコミットが沢山あると履歴が複雑化
# ・リベース
# 　メリット：履歴をきれいに保つことができる
# 　デメリット：コンフリクトの解決が若干面倒（コミット単位の解消が必要）

# プルのマージ型
# 　git pull <リモート名> <ブランチ名>
# プルのリベース型
# 　※マージコミットが残らないからGitHubの内容を取得したいだけの時は「--rebase」を使おう
# 　git pull --rebase <リモート名> <ブランチ名>

# ファイルへの変更を取消
git checkout
　-- <ファイル名/ディレクトリ名>：対象の変更を取り消す
　-- .：全変更を取り消す
　<既存ブランチ名>：ブランチを切り替える
　-b <新ブランチ名>：新規ブランチを作成して切り替える

# ステージングに追加したファイルの取消
git reset HEAD <ファイル名/ディレクトリ名>
　.：全変更を取り消す
　--soft：ワークディレクトリの内容はそのままでコミットだけを取り消す
　--hard：コミット取り消した上でワークディレクトリの内容も取り消す

# ファイルの削除
git rm <ファイル名>
　-r <ディレクトリ名>：ローカルリポジトリから指定したディレクトリの全てのファイルが対象
　--cached <ファイル名>：ワークツリー上にファイルを残す

# リポジトリ上のファイルの移動
git mv <旧ファイル> <新ファイル>
　※以下コマンドと同等
　mv <旧ファイル> <新ファイル>
　git rm <旧ファイル>
　git add <新ファイル>

# 変更されたファイルを確認（コンフリクトも確認できる）
git status

# リモートリポジトリにpushしていない変更分の確認
git diff <ファイル名>：git add する前の変更分   
　--staged：git add した後の変更分

# コミット履歴の確認
git log
　--oneline：差分ログを1行で表示する
　-p <ファイル名>：ファイルの差分を表示する
　-n <コミット数>：表示するコミット数を設定
　--decorate：どのブランチがどのコミットを指しているか確認

# 作業を一時避難する（ワークツリーもステージも対象）
git stash (save)
  list：避難したした作業を確認

## 避難した作業を復元する
git stash apply
　apply --index：ステージの状況も復元する
　apply <スタッシュ名>：特定の作業を復元する
　例）git stash apply stash@{1}

# 避難した作業を削除する
# git stash drop
　<スタッシュ名>：特定の作業を削除する
　　例）git stash drop stash@{1}
　clear：全作業を削除する

# gitの設定
git config
　--global alias.<エイリアス> <コマンド>：コマンドにエイリアスを付ける
　　例）git config --global alias.ci commit
　--global merge.ff false：FastForwordを行わせない設定
　--global pull.rebase true：プルをリベース型で初期設定（--rebaseオプションをつけなくてもgit pullの挙動がリベース型）
　例）git config branch.master.rebase true：masterブランチでgit pull すると時だけリベース型

## .gitignreファイルの書き方
・"#"から始まる行はコメント
# 指定したファイルを除外
index.html
# ルートディレクトリを指定
/root.html
# ディレクトリ以下を除外
dir /
# /以外の文字列にマッチ「*」
/*/*.css


## 実例
# ・エディター上でやり直したいコミットをeditにして保存
# 　git rebase -i HEAD~3
# 　↓
# 　pick gh21～　⇒　「edit gh21～」
# 　pick 1930～
# 　pick 84gh～
#
# ・ローカルでファイルの内容を修正
#
# ・やり直したら実行
# 　git commit --amend
# ・次のコミットに進む（リベース完了）
# 　git rebase --continue

# コミットを分割する

## 実例
# git rebase -i HEAD~3
# 　↓
# pick gh21～
# pick 1930～
# pick 41gh～："readmeとindexを修正" ⇒ 「edit 41gh～」
#
# 続けて、
# git reset HEAD^
# git add README
# git commit -m "README修正"
# git add index.html
# git commit -m "index.htmlを修正"
# git rebase --continue

## 実例
# コミットを纏める
# git rebase -i HEAD~3
# 　↓
# pick gh21～
# pick 1930～　⇒　「squash 1930～」
# pick 84gh～　⇒　「squash 84gh～」
# ※squash：そのコミットの直前のコミットと一つにする

## 実例
# コミットを並び替える、削除する
# エディター上でやり直したいコミットをeditにして保存
# git rebase -i HEAD~3
# 　↓
# pick gh21～　⇒　「edit gh21～」
# pick 1930～
# pick 84gh～
#
# ①84ghを削除
# ②1930を先に適用する
# 　→「84gh」の行を削除
# 　→「1930」を上位に移動する

その他
＜その他、コマンド＞
# すべてのファイルを表示（隠しファイルを含む）
ls -a
# 空ファイルを作成
touch <ファイル名>
